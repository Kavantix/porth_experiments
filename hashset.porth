include "std.porth"
include "./malloc.porth"
include "./shared.porth"
include "./hash.porth"

const sizeof(HashsetValue)
  sizeof(u64)   // hash
  sizeof(Str) + // value
end

macro hashsetValue.hash end
macro @hashsetValue.hash hashsetValue.hash @64 end
macro !hashsetValue.hash hashsetValue.hash !64 end
macro hashsetValue.value sizeof(u64) + end
macro @hashsetValue.value hashsetValue.value @Str end
macro !hashsetValue.value hashsetValue.value !Str end

macro sizeof(Hashset.argholder)
  sizeof(Str)   // key
  sizeof(u64) + // hash
end
macro hashset.argholder hashset_current end
macro !hashset.argholder hashset.argholder !64 end
macro @hashset.argholder hashset.argholder @64 cast(ptr) end
macro hashset.argholder.key @hashset.argholder end
macro @hashset.argholder.key.count hashset.argholder.key @Str.count end
macro @hashset.argholder.key.data hashset.argholder.key @Str.data end
macro @hashset.argholder.key hashset.argholder.key @Str end
macro !hashset.argholder.key hashset.argholder.key !Str end
macro hashset.argholder.hash hashset.argholder.key sizeof(Str) + end
macro @hashset.argholder.hash hashset.argholder.hash @64 end
macro !hashset.argholder.hash hashset.argholder.hash !64 end

macro hashset_current @scratch cast(ptr) end
macro !hashset_current !scratch end

macro len(hashset.values) 5 end
// macro len(hashset.values) 256 end
macro hashset.values hashset.argholder sizeof(u64) + end
macro !hashset.values hashset.values !64 end
macro @hashset.values hashset.values @64 cast(ptr) end

const offsetof(Hashset.argholder) sizeof(ptr) offset end
const offsetof(Hashset.values) sizeof(ptr) offset end
const sizeof(Hashset) reset end

proc Hashset.values offsetof(Hashset.values) + end
proc @Hashset.values Hashset.values @ptr end
proc @*Hashset.values @ptr Hashset.values @ptr end
proc !Hashset.values Hashset.values !ptr end
proc !*Hashset.values @ptr Hashset.values !ptr end
proc Hashset.argholder offsetof(Hashset.argholder) + end
proc !Hashset.argholder Hashset.argholder !ptr end
proc @Hashset.argholder Hashset.argholder @ptr end

proc Hashset.new
  memory set sizeof(ptr) end
  sizeof(Hashset) malloc set !ptr
  sizeof(Hashset.argholder) malloc set @ptr !Hashset.argholder
  sizeof(HashsetValue) len(hashset.values) * malloc set !*Hashset.values
  set @ptr
end

macro hashset.length len(hashset.values) end
macro @Hashset.length drop len(hashset.values) end


macro Hashset.delete 
  dup @Hashset.values free drop
  dup @Hashset.argholder free drop
  free drop
end

proc _Hashset.hashandindex // ptr Str -- hash *value
  hash_str
  2dup swap @Hashset.length mod
  sizeof(HashsetValue) * rot @Hashset.values +
end

// inputs: *hashset key(Str(count *data)) to put in set
proc Hashset.put
  memory key sizeof(Str) end
  key !Str
  memory set sizeof(ptr) end
  set !ptr
  memory hash sizeof(u64) end

  set @ptr key @Str _Hashset.hashandindex swap hash !64
  dup key @Str rot !hashsetValue.value
      hash @64 swap !hashsetValue.hash

end

proc Hashset.contains
  memory key sizeof(Str) end
  key !Str
  memory set sizeof(ptr) end
  set !ptr

  set @ptr key @Str _Hashset.hashandindex swap drop
  dup @hashsetValue.hash 0 != if
     key @Str rot @hashsetValue.value streq
  else
    drop
    false
  end
end

// inputs: set key(count, *data)
// returns: bool indicating if removed
proc hashset.remove
  memory key sizeof(Str) end
  key !Str
  memory set sizeof(ptr) end
  set !ptr

  set @ptr key @Str Hashset.contains if
    set @ptr key @Str _Hashset.hashandindex swap drop
    dup 0 NULL rot !hashsetValue.value
        0 swap !hashsetValue.hash
    true
  else
    false
  end
end

macro hashset.print
  !hashset_current
  "hashset stored at:" eputs hashset_current print
  "values: " eputsln
  0 while dup hashset.length < do
    "  '" eputs
    dup sizeof(HashsetValue) * @hashset.values +
    dup @hashsetValue.value eputs
    "': " eputs
        @hashsetValue.hash print
    1 +
  end drop
end

Hashset.new
dup "testtet" Hashset.put
dup "whut" Hashset.put
dup "ola" Hashset.put
dup "tttt" Hashset.put
dup hashset.print
"Hashset contains 'whut': " eputs
dup "whut" Hashset.contains if "yes" else "no" end eputsln
"Removing 'whut'" eputsln
dup "whut" hashset.remove if
  "Removed 'whut'" eputsln
else
  "Did not need to remove 'whut'" eputsln
end
"Hashset contains 'whut': " eputs
dup "whut" Hashset.contains if "yes" else "no" end eputsln
// dup hashset.print
Hashset.delete
